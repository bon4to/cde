{% extends 'base.j2' %}

{% block title %}Envase • Calendário{% endblock title %}

{% block content %}

    <div class="titles-ruler">
        
        {% from 'components/title-route.j2' import title_container %}
        {{ title_container(
            id_page=session['id_page'],
            breadcrumbs=[
                {'text': 'PROD', 'url': 'home_prod', 'title': 'PRODUÇÃO'},
                {'text': 'ENVASE', 'url': 'envase', 'title': 'ENVASE'},
                {'text': 'CALENDÁRIO'}
            ],
            aux_buttons=[
                {'type': 'link', 'url': 'calendar_envase', 'icon': 'svg/calendar.svg', 'title': 'MODO: CALENDÁRIO', 'active': True},
                {'type': 'divider'},
                {'type': 'disabled', 'icon': 'svg/clipboard-list.svg', 'title': 'MOSTRAR/OCULTAR FORMULÁRIO'},
                {'type': 'divider'},
                {'type': 'disabled', 'icon': 'svg/filter.svg', 'title': 'FILTROS'},
                {'type': 'action', 'icon': 'svg/circle-arrow-left.svg', 'title': 'VOLTAR', 'onclick': 'goBack()'}
            ]
        ) }}

    </div>

    <div id="divContent">
        <div class="form-login">
            <br>
            <div id="calendar-container"></div>
            <div>
                <div class="legenda-container">
                    <div class="legenda-item" style="background-color: rgba(var(--alt-color-1), 1);">1</div>
                    <div class="legenda-item" style="background-color: rgba(var(--alt-color-2), 1);">2</div>
                    <div class="legenda-item" style="background-color: rgba(var(--alt-color-3), 1);">3</div>
                    <div class="legenda-item" style="background-color: rgba(var(--alt-color-4), 1);">4</div>
                    <div class="legenda-item" style="background-color: rgba(var(--alt-color-5), 1);">5</div>
                    <!-- INATIVOS
                        <div class="legenda-item" style="background-color: rgba(var(--alt-color-6), 1);">6</div>
                        <div class="legenda-item" style="background-color: rgba(var(--alt-color-7), 1);">7</div>
                    -->
                </div>
            </div>
        </div>
    </div>

{% endblock content %}

{% block route_script %}

    <script>

        function generateCalendar(year, month) {
            const calendarContainer = document.getElementById('calendar-container');
            const daysInMonth = new Date(year, month + 1, 0).getDate();
            const firstDay = new Date(year, month, 1).getDay();

            let html = '<table class="calendar"><thead><tr><th>DOM</th><th>SEG</th><th>TER</th><th>QUA</th><th>QUI</th><th>SEX</th><th>SAB</th></tr></thead><tbody>';

            let day = 1;
            for (let i = 0; i < 6; i++) {
                html += '<tr>';
                for (let j = 0; j < 7; j++) {
                    if ((i === 0 && j < firstDay) || day > daysInMonth) {
                        html += '<td class="calendar"></td>';
                    } else {
                        const date = new Date(year, month, day);
                        const weekendClass = date.getDay() === 0 || date.getDay() === 6 ? 'weekend' : '';
                        html += `<td class="calendar ${weekendClass}" data-date="${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}">${day}</td>`;
                        day++;
                    }
                }
                html += '</tr>';
                if (day > daysInMonth) break;
            }

            html += '</tbody></table>';
            calendarContainer.innerHTML = html;
        }

        const today = new Date();
        generateCalendar(today.getFullYear(), today.getMonth());

        document.addEventListener('DOMContentLoaded', function() {
            var envase = {{ envase | tojson }};
            console.log(envase)

            var dataEnvL1 = [];
            var dataEnvL2 = [];
            var dataEnvL3 = [];
            var dataEnvL4 = [];
            var dataEnvL5 = [];
            var dataEnvL6 = [];
            var dataEnvL7 = [];

            envase.forEach(item => {
                dataEnvL1.push(item.dataEnvaseL1);
                dataEnvL2.push(item.dataEnvaseL2);
                dataEnvL3.push(item.dataEnvaseL3);
                dataEnvL4.push(item.dataEnvaseL4);
                dataEnvL5.push(item.dataEnvaseL5);
                dataEnvL6.push(item.dataEnvaseL6);
                dataEnvL7.push(item.dataEnvaseL7);
            });


            const calendario = document.getElementById('calendar-container');
            const cells = calendario.querySelectorAll('td');

            cells.forEach(cell => {
                const data = cell.dataset.date;
                const linha1 = dataEnvL1.includes(data);
                const linha2 = dataEnvL2.includes(data);
                const linha3 = dataEnvL3.includes(data);
                const linha4 = dataEnvL4.includes(data);
                const linha5 = dataEnvL5.includes(data);
                const linha6 = dataEnvL6.includes(data);
                const linha7 = dataEnvL7.includes(data);

                if (linha1 || linha2 || linha3 || linha4 || linha5 || linha6 || linha7) {
                    const linhasComEvento = [];
                    if (linha1) linhasComEvento.push('1');
                    if (linha2) linhasComEvento.push('2');
                    if (linha3) linhasComEvento.push('3');
                    if (linha4) linhasComEvento.push('4');
                    if (linha5) linhasComEvento.push('5');
                    if (linha6) linhasComEvento.push('6');
                    if (linha7) linhasComEvento.push('7');

                    const flexContainer = document.createElement('div');
                    flexContainer.classList.add('flex');

                    linhasComEvento.forEach(linhaClass => {
                        const sessionContainer = document.createElement('div');
                        sessionContainer.classList.add('session-container', 'alt-color-' + linhaClass);
                        sessionContainer.style.border = '1px solid rgba(var(--alt-color-' + linhaClass + '), 1)';

                        const items = envase.filter(item => item.linha === parseInt(linhaClass) && item.data_envase === data);
                        console.log(items);

                        if (items.length > 0) {
                            const tooltip = document.createElement("span");
                            tooltip.classList.add("tooltiptext");

                            items.forEach(item => {
                                const itemTooltip = document.createElement("div");
                                itemTooltip.innerHTML = `${item.flag_concluido}`;
                                tooltip.appendChild(itemTooltip);
                            });

                            tooltip.style.color = 'rgba(var(--alt-color-' + linhaClass + '), 1)';
                            sessionContainer.appendChild(tooltip);
                        }


                        flexContainer.appendChild(sessionContainer);
                    });
                    cell.appendChild(flexContainer);
                }
            });
        });
    </script>

{% endblock route_script %}